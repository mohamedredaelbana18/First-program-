// Real Estate Investment Manager - Database Schema
// مدير الاستثمار العقاري - مخطط قاعدة البيانات

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// العملاء - Customers
model Customer {
  id        String   @id @default(cuid())
  name      String   // اسم العميل
  phone     String?  // رقم الهاتف
  email     String?  // البريد الإلكتروني
  address   String?  // العنوان
  notes     String?  @db.Text // ملاحظات
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contracts Contract[] // العقود المرتبطة بالعميل

  @@map("customers")
}

// الوحدات العقارية - Units
model Unit {
  id          String   @id @default(cuid())
  name        String   // اسم الوحدة
  type        String?  // نوع الوحدة (شقة، فيلا، محل، إلخ)
  area        Float?   // المساحة
  location    String?  // الموقع
  price       Float    @default(0) // السعر
  description String?  @db.Text // وصف الوحدة
  status      String   @default("متاح") // الحالة
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  contracts    Contract[]    // العقود المرتبطة بالوحدة
  unitPartners UnitPartner[] // الشراكات في الوحدة

  @@map("units")
}

// الشركاء - Partners
model Partner {
  id        String   @id @default(cuid())
  name      String   // اسم الشريك
  phone     String?  // رقم الهاتف
  email     String?  // البريد الإلكتروني
  address   String?  // العنوان
  share     Float    @default(0) // نسبة الشراكة
  groupId   String?  // مجموعة الشريك
  notes     String?  @db.Text // ملاحظات
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  unitPartners UnitPartner[] // شراكات الوحدات
  partnerDebts PartnerDebt[] // ديون الشريك
  group        PartnerGroup? @relation(fields: [groupId], references: [id])

  @@map("partners")
}

// شراكات الوحدات - Unit Partners
model UnitPartner {
  id        String   @id @default(cuid())
  unitId    String   // معرف الوحدة
  partnerId String   // معرف الشريك
  share     Float    @default(0) // نسبة الشراكة في الوحدة
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  unit    Unit    @relation(fields: [unitId], references: [id], onDelete: Cascade)
  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([unitId, partnerId])
  @@map("unit_partners")
}

// العقود - Contracts
model Contract {
  id           String   @id @default(cuid())
  customerId   String   // معرف العميل
  unitId       String   // معرف الوحدة
  totalPrice   Float    @default(0) // السعر الإجمالي
  downPayment  Float    @default(0) // المقدم
  remaining    Float    @default(0) // المبلغ المتبقي
  installments Int      @default(0) // عدد الأقساط
  startDate    DateTime @default(now()) // تاريخ البداية
  endDate      DateTime? // تاريخ النهاية
  status       String   @default("نشط") // حالة العقد
  notes        String?  @db.Text // ملاحظات
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  customer         Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  unit             Unit              @relation(fields: [unitId], references: [id], onDelete: Cascade)
  installmentsList Installment[]     // قائمة الأقساط
  contractVouchers ContractVoucher[] // سندات العقد

  @@map("contracts")
}

// الأقساط - Installments
model Installment {
  id         String    @id @default(cuid())
  contractId String    // معرف العقد
  amount     Float     @default(0) // مبلغ القسط
  dueDate    DateTime  // تاريخ الاستحقاق
  paidDate   DateTime? // تاريخ الدفع
  status     String    @default("مستحق") // حالة القسط
  notes      String?   @db.Text // ملاحظات
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("installments")
}

// ديون الشركاء - Partner Debts
model PartnerDebt {
  id        String    @id @default(cuid())
  partnerId String    // معرف الشريك
  amount    Float     @default(0) // مبلغ الدين
  dueDate   DateTime? // تاريخ الاستحقاق
  paidDate  DateTime? // تاريخ السداد
  status    String    @default("مستحق") // حالة الدين
  notes     String?   @db.Text // ملاحظات
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@map("partner_debts")
}

// الخزائن - Safes
model Safe {
  id        String   @id @default(cuid())
  name      String   // اسم الخزنة
  balance   Float    @default(0) // الرصيد
  currency  String   @default("EGP") // العملة
  notes     String?  @db.Text // ملاحظات
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transfersFrom Transfer[] @relation("FromSafe")
  transfersTo   Transfer[] @relation("ToSafe")
  vouchers      Voucher[]  // السندات المرتبطة

  @@map("safes")
}

// التحويلات - Transfers
model Transfer {
  id          String   @id @default(cuid())
  fromSafeId  String   // معرف الخزنة المرسلة
  toSafeId    String   // معرف الخزنة المستقبلة
  amount      Float    @default(0) // المبلغ
  description String?  @db.Text // وصف التحويل
  date        DateTime @default(now()) // تاريخ التحويل
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  fromSafe Safe @relation("FromSafe", fields: [fromSafeId], references: [id])
  toSafe   Safe @relation("ToSafe", fields: [toSafeId], references: [id])

  @@map("transfers")
}

// سجل العمليات - Audit Log
model AuditLog {
  id          String   @id @default(cuid())
  description String   // وصف العملية
  details     Json?    // تفاصيل العملية
  timestamp   DateTime @default(now()) // وقت العملية
  userId      String?  // معرف المستخدم (إذا كان متاحاً)

  @@map("audit_log")
}

// السندات - Vouchers
model Voucher {
  id          String   @id @default(cuid())
  type        String   // نوع السند (إيداع، سحب، إلخ)
  amount      Float    @default(0) // المبلغ
  description String?  @db.Text // وصف السند
  date        DateTime @default(now()) // تاريخ السند
  safeId      String?  // معرف الخزنة
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  safe             Safe?             @relation(fields: [safeId], references: [id])
  contractVouchers ContractVoucher[] // ربط السندات بالعقود

  @@map("vouchers")
}

// ربط السندات بالعقود - Contract Vouchers
model ContractVoucher {
  id         String @id @default(cuid())
  contractId String // معرف العقد
  voucherId  String // معرف السند

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  voucher  Voucher  @relation(fields: [voucherId], references: [id], onDelete: Cascade)

  @@unique([contractId, voucherId])
  @@map("contract_vouchers")
}

// مستحقات الوسطاء - Broker Dues
model BrokerDue {
  id        String    @id @default(cuid())
  brokerId  String    // معرف الوسيط
  amount    Float     @default(0) // مبلغ المستحق
  dueDate   DateTime? // تاريخ الاستحقاق
  paidDate  DateTime? // تاريخ الدفع
  status    String    @default("مستحق") // الحالة
  notes     String?   @db.Text // ملاحظات
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  broker Broker @relation(fields: [brokerId], references: [id], onDelete: Cascade)

  @@map("broker_dues")
}

// الوسطاء - Brokers
model Broker {
  id          String      @id @default(cuid())
  name        String      // اسم الوسيط
  phone       String?     // رقم الهاتف
  email       String?     // البريد الإلكتروني
  address     String?     // العنوان
  commission  Float       @default(0) // نسبة العمولة
  notes       String?     @db.Text // ملاحظات
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  brokerDues BrokerDue[] // مستحقات الوسيط

  @@map("brokers")
}

// مجموعات الشركاء - Partner Groups
model PartnerGroup {
  id          String   @id @default(cuid())
  name        String   // اسم المجموعة
  description String?  @db.Text // وصف المجموعة
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  partners Partner[] // الشركاء في المجموعة

  @@map("partner_groups")
}

// الإعدادات - Settings
model Setting {
  id    String @id @default(cuid())
  key   String @unique // مفتاح الإعداد
  value Json   // قيمة الإعداد
  type  String @default("string") // نوع الإعداد

  @@map("settings")
}

// بيانات متنوعة - Key-Value Store
model KeyValue {
  id    String @id @default(cuid())
  key   String @unique // المفتاح
  value Json   // القيمة

  @@map("key_values")
}